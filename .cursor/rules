# Cursor Rules for Widget Template

[preferences]
auto_format = true
commit_on_every_change = true
push_dist = false

[security]

# üîí CRITICAL SECURITY REQUIREMENTS:

# - NEVER commit secrets, API keys, tokens, or passwords to the repository

# - Use GitHub repository secrets for CI/CD credentials (VERCEL_TOKEN, etc.)

# - Reference SECURITY.md for all security best practices

# - Use .env.local for local development (this file is gitignored)

# - Validate environment variables are properly configured

# - Only use VITE*PUBLIC*\* variables for client-side non-sensitive data

# - Check .gitignore includes .env\* files before committing

# - Report security issues privately, never in public GitHub issues

[notes]

# - Template for building embeddable widget collections

# - Auto-deploys on Vercel with every git push

# - Always auto-format code on save

# - Commit every change automatically

# - Never push dist/ to git

# - SPA routing and static asset handling via vercel.json

# - Prefer autonomous, multi-step workflows without repeated confirmation

# - Think a few steps ahead and avoid unnecessary interruptions

# - ALWAYS commit and push changes after completing tasks

#

# Project: Widget Template - Modern React + TypeScript Template

# Purpose: Template for building embeddable widget collections

#

# Architecture & Features:

# - Clean, refactored codebase with TypeScript

# - Modular component architecture (WidgetCard, WidgetGrid)

# - Comprehensive UX testing with Vitest

# - Embeddable widget template (React + TypeScript + shadcn/ui)

# - Individual widgets embeddable without navigation

# - Responsive design with Tailwind CSS

# - Accessibility-first with ARIA attributes and keyboard navigation

# - PWA support with web manifest and favicons

#

# ICON LIBRARY STANDARD: üéØ PHOSPHOR ICONS ONLY

# - **PRIMARY ICON LIBRARY**: @phosphor-icons/react (https://phosphoricons.com/)

# - **IMPORT PATTERN**: import { IconName } from '@phosphor-icons/react'

# - **WHY PHOSPHOR**: Consistent design system, extensive library (6000+ icons), excellent React support

# - **ICON WEIGHTS**: regular (default), thin, light, bold, fill, duotone - use 'fill' for primary actions

# - **EXAMPLES**:

# - import { House, User, Settings, Plus, X } from '@phosphor-icons/react'

# - <House size={24} weight="fill" className="text-primary" />

# - **NEVER USE**: lucide-react, heroicons, or other icon libraries except for existing shadcn/ui components

# - **REPLACEMENT GUIDE**:

# - ChevronDown ‚Üí CaretDown

# - X ‚Üí X (same)

# - Plus ‚Üí Plus

# - Search ‚Üí MagnifyingGlass

# - Settings ‚Üí Gear

# - Home ‚Üí House

#

# Design Principles:

# - NO HEADERS IN WIDGETS: Widgets should never include page headers, titles, or descriptions

# to maintain clean embedding appearance and avoid redundant information when embedded

# - SINGLE-PURPOSE WIDGETS: Each widget should serve one specific function

# rather than combining multiple features into one widget for better modularity and reusability

# - WIDGET CATEGORIZATION: 100% of widgets MUST have a valid category filter to ensure proper organization

# and discoverability. Every widget must belong to one of: Productivity, Utilities, Personal, or custom categories

# - COMPLETE IMPLEMENTATION: Every widget defined in src/constants/widgets.ts MUST have:

# 1. A corresponding React component in src/pages/

# 2. A route defined in src/App.tsx

# 3. Proper TypeScript types and error handling

# 4. Tests that verify the widget loads and functions correctly

# - Content should be self-contained and immediately useful without context

# - Focus on data presentation rather than page structure

#

# Development Workflow:

# - **WIDGET CREATION**: Use `npm run widget:new <widget-name>` to scaffold new widgets

# - **QUICK COMMANDS**:

# - `npm run dev` - Start development with hot reload

# - `npm run test` - Run tests in watch mode

# - `npm run lint:fix` - Fix linting issues

# - `npm run format` - Format all code

# - `npm run clean` - Clean build artifacts

# - `npm run deps:check` - Check for outdated dependencies

# - **WIDGET SCAFFOLD**: Automatically creates component, test, route, and constant entry

# - **PHOSPHOR ICONS**: Always use Phosphor icons, templates include proper examples

#

# Project Structure:

# - src/components/ - Reusable UI components (WidgetCard, WidgetGrid, Layout)

# - src/components/ui/ - shadcn/ui components (Button, Tabs, Card, Table, Input, Textarea)

# - src/pages/ - Page components (Home, ExampleWidget, NotFound)

# - src/types/ - TypeScript type definitions

# - src/constants/ - Widget data and configuration

# - src/utils/ - Utility functions for filtering and management

# - src/services/ - API services and external integrations

# - src/test/ - Test configuration and setup

# - public/ - Static assets, favicons, and PWA manifest

# - scripts/ - Development utilities (widget creation, etc.)

#

# Widget System:

# - All widgets defined in src/constants/widgets.ts

# - Easy to add new widgets via `npm run widget:new <name>` command

# - Categories: All, Productivity, Utilities, Personal (extensible)

# - REQUIREMENT: Every widget MUST have a valid category that appears in Home page tabs

# - REQUIREMENT: Every widget MUST be fully implemented (component + route + tests)

# - Embeddable URLs: /widgets/\* pattern for clean embedding

# - Main gallery: / with category-based tab navigation

#

# Testing:

# - Comprehensive UX tests covering user interactions

# - Component tests for WidgetCard and WidgetGrid

# - Unit tests for utility functions

# - Accessibility and keyboard navigation tests

# - Performance and layout stability tests

# - TypeScript build validation with test:build

# - Comprehensive testing with test:all (build + lint + tests)

# - Widget category validation: Ensure all widgets have proper filters

# - Widget implementation validation: Ensure all widgets are fully implemented

# - Run with: npm run test, npm run test:run, npm run test:coverage, npm run test:all

#

# Code Quality:

# - TypeScript strictness with proper type definitions

# - ESLint configuration for code quality

# - Prettier for consistent formatting

# - Auto-formatting and linting on save

# - Hot module replacement for fast development

# - NEVER leave widgets partially implemented - always complete the full cycle:

# constants ‚Üí component ‚Üí route ‚Üí tests

# - ALWAYS commit and push changes after completing tasks or major features

# - Use descriptive commit messages following conventional commits format

# - Auto-deploy happens via Vercel on every push to main branch

# - ALWAYS use Phosphor Icons with proper imports and consistent styling

#

# Icon Usage Examples:

# ```tsx

# // ‚úÖ CORRECT - Using Phosphor Icons

# import { House, Gear, Plus, MagnifyingGlass } from '@phosphor-icons/react'

#

# <House size={24} weight="fill" className="text-primary" />

# <Gear size={16} className="text-muted-foreground" />

# <Plus size={20} weight="bold" />

#

# // ‚ùå INCORRECT - Don't use other icon libraries

# import { Home, Settings } from 'lucide-react'

# import { HomeIcon } from '@heroicons/react/24/outline'

# ```

#

# Widget Template Structure:

# ```tsx

# import { Cube, Sparkle } from '@phosphor-icons/react'

#

# export default function MyWidget() {

# return (

# <div className="container mx-auto p-4 max-w-4xl">

# <div className="text-center space-y-4">

# <div className="flex items-center justify-center gap-2">

# <Cube size={32} weight="fill" className="text-primary" />

# <h1 className="text-3xl font-bold">Widget Title</h1>

# </div>

# {/_ Widget content _/}

# </div>

# </div>

# )

# }

# ```

# Template Guidelines:

# - Keep the example widget as a reference for new implementations

# - Maintain the clean separation between template infrastructure and user content

# - Document any new patterns or architectural decisions

# - Preserve the excellent tooling and development experience

# - Focus on extensibility and ease of use for developers using this template

# - Always demonstrate Phosphor Icons usage in examples and documentation

# - Ensure all new components follow the established icon patterns
