# Cursor Rules for Widget Platform Template

[preferences]
auto_format = true
commit_on_every_change = true
push_dist = false

[notes]
# - Template for building embeddable widget platforms
# - Auto-deploys on Vercel with every git push
# - Always auto-format code on save
# - Commit every change automatically
# - Never push dist/ to git
# - SPA routing and static asset handling via vercel.json
# - Prefer autonomous, multi-step workflows without repeated confirmation
# - Think a few steps ahead and avoid unnecessary interruptions
# - ALWAYS commit and push changes after completing tasks
#
# Project: Widget Platform Template - Modern React + TypeScript Template
# Purpose: Template for building embeddable widget collections
#
# Architecture & Features:
# - Clean, refactored codebase with TypeScript
# - Modular component architecture (WidgetCard, WidgetGrid)
# - Comprehensive UX testing with Vitest
# - Embeddable widget platform (React + TypeScript + shadcn/ui)
# - Individual widgets embeddable without navigation
# - Responsive design with Tailwind CSS
# - Accessibility-first with ARIA attributes and keyboard navigation
# - PWA support with web manifest and favicons
#
# Design Principles:
# - NO HEADERS IN WIDGETS: Widgets should never include page headers, titles, or descriptions
#   to maintain clean embedding appearance and avoid redundant information when embedded
# - SINGLE-PURPOSE WIDGETS: Each widget should serve one specific function
#   rather than combining multiple features into one widget for better modularity and reusability
# - WIDGET CATEGORIZATION: 100% of widgets MUST have a valid category filter to ensure proper organization
#   and discoverability. Every widget must belong to one of: Productivity, Utilities, Personal, or custom categories
# - COMPLETE IMPLEMENTATION: Every widget defined in src/constants/widgets.ts MUST have:
#   1. A corresponding React component in src/pages/
#   2. A route defined in src/App.tsx
#   3. Proper TypeScript types and error handling
#   4. Tests that verify the widget loads and functions correctly
# - Content should be self-contained and immediately useful without context
# - Focus on data presentation rather than page structure
#
# Project Structure:
# - src/components/ - Reusable UI components (WidgetCard, WidgetGrid, Layout)
# - src/components/ui/ - shadcn/ui components (Button, Tabs, Card, Table, Input, Textarea)
# - src/pages/ - Page components (Home, ExampleWidget, NotFound)
# - src/types/ - TypeScript type definitions
# - src/constants/ - Widget data and configuration
# - src/utils/ - Utility functions for filtering and management
# - src/services/ - API services and external integrations
# - src/test/ - Test configuration and setup
# - public/ - Static assets, favicons, and PWA manifest
#
# Widget System:
# - All widgets defined in src/constants/widgets.ts
# - Easy to add new widgets via constants + pages + routes
# - Categories: All, Productivity, Utilities, Personal (extensible)
# - REQUIREMENT: Every widget MUST have a valid category that appears in Home page tabs
# - REQUIREMENT: Every widget MUST be fully implemented (component + route + tests)
# - Embeddable URLs: /widgets/* pattern for clean embedding
# - Main gallery: / with category-based tab navigation
#
# Testing:
# - Comprehensive UX tests covering user interactions
# - Component tests for WidgetCard and WidgetGrid
# - Unit tests for utility functions
# - Accessibility and keyboard navigation tests
# - Performance and layout stability tests
# - TypeScript build validation with test:build
# - Comprehensive testing with test:all (build + lint + tests)
# - Widget category validation: Ensure all widgets have proper filters
# - Widget implementation validation: Ensure all widgets are fully implemented
# - Run with: npm run test, npm run test:run, npm run test:coverage, npm run test:all
#
# Development:
# - Vite config with path alias (@ -> src) and test support
# - TypeScript strictness with proper type definitions
# - ESLint configuration for code quality
# - Auto-formatting and linting on save
# - Hot module replacement for fast development
# - NEVER leave widgets partially implemented - always complete the full cycle:
#   constants → component → route → tests
# - ALWAYS commit and push changes after completing tasks or major features
# - Use descriptive commit messages following conventional commits format
# - Auto-deploy happens via Vercel on every push to main branch 

# Template Guidelines:
# - Keep the example widget as a reference for new implementations
# - Maintain the clean separation between template infrastructure and user content
# - Document any new patterns or architectural decisions
# - Preserve the excellent tooling and development experience
# - Focus on extensibility and ease of use for developers using this template 