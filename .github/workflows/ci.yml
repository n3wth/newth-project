name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  # Quality Checks - Run on all branches
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔨 Type Check
        run: npm run type-check

      - name: 🧹 Lint Code
        run: npm run lint

      - name: 🎨 Check Formatting
        run: npm run format -- --check

      - name: 🧪 Run Tests
        run: npm run test:coverage

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 🏗️ Build Application
        run: npm run build

      - name: 💾 Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist
            .next
          key: build-${{ github.sha }}

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Audit Dependencies
        run: npm audit --audit-level=high

      - name: 🛡️ Check for Vulnerabilities
        run: |
          npm install -g npm-check-updates
          ncu --doctor --pre 1

  # Staging Deployment (Auto)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://newth-project-staging.vercel.app
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔽 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://newth-project.vercel.app
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔽 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Preview Deployment for PRs
  preview-deployment:
    name: 🔍 Preview Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'pull_request'
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔽 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        id: vercel-deploy
        run: echo "preview-url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT

      - name: 💬 Comment Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;

            const comment = `## 🚀 Preview Deployment Ready!

            **Preview URL:** ${{ steps.vercel-deploy.outputs.preview-url }}

            ### 🔍 What to check:
            - [ ] UI/UX looks correct
            - [ ] All widgets work properly  
            - [ ] Responsive design on mobile
            - [ ] No console errors
            - [ ] Accessibility features work

            ### 🤖 Automated Checks:
            - ✅ Tests passed
            - ✅ Build successful
            - ✅ TypeScript compilation
            - ✅ Linting passed

            *This preview will be automatically deleted when the PR is closed.*`;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: comment
            });

  # Lighthouse Performance Audit
  lighthouse-audit:
    name: 🔍 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [preview-deployment]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
